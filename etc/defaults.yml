# Unmasking tool config file for defining default unmasking experiment
# configuration parameters.
#
# These values can be overridden via job-specific configuration files
# You can append % to the names of objects or lists in your job config
# to inherit from this default configuration.
#
# You can use variables starting with $ for values which are defined
# in job.experiment.configurations. The definition consists of a list
# of values for this variable, each representing a separate experiment
# configuration. The specified aggregator will be used to aggregate
# results of multiple configurations.

---

# Defaults for Job configuration
job:
  # Default feature set for representing texts in vectors
  #
  # You can also specify an optional dictionary of parameters for
  # configuring properties of this feature set.
  classifier.feature_set:
    name: classifier.features.AvgWordFreqFeatureSet
    parameters: null

  # Default samplers for generating chunk pairs.
  #
  # You can also specify an optional dictionary of parameters for
  # configuring properties of this feature set.
  classifier.sampler:
    name: classifier.sampling.RandomOversampler
    parameters: null

  # Default unmasking strategy to be applied.
  unmasking:
    strategy:
      name: unmasking.strategies.FeatureRemoval
      parameters:
        num_eliminate: 10

    # Number of unmasking iterations
    iterations: 10

    # Feature vector size
    vector_size: 250

    # Number of cross-validation folds for comparing two texts of a pair
    folds: 10

    # Whether to use relative instead of absolute feature weights.
    relative: false

    # Whether to monotonize curves after unmasking
    monotonize: false

  # Output formats for specific events and optional parameters.
  # For events you can specify the name and optionally a list of senders to listen to.
  #
  # For example:
  # events:
  #   - name: onProgress
  #     senders:
  #       - input.formats.BookSampleParser
  outputs:
    - name: output.formats.UnmaskingStatAccumulator
      parameters: null
      events:
        - name: onPairGenerated
        - name: onUnmaskingFinished

    - name: output.formats.UnmaskingCurvePlotter
      parameters:
        display: false
        markers:
          SAME_AUTHOR: ["o", "same author", "#009900"]
          DIFFERENT_AUTHORS: ["x", "different authors", "#990000"]

        ylim: [0.0, 1.0]
      events:
        - name: onUnmaskingRoundFinished

    - name: output.formats.ProgressPrinter
      parameters:
        text: Chunking current pair
      events:
        - name: onProgress
          senders:
            - input.interfaces.SamplePair

  # Output directory
  output_dir: out

  # Global experiment settings
  experiment:
    # Definition of values for experiment configurations.
    # This is a dictionary of variable names mapping to a vector of possible
    # configuration values. An experiment will be run multiple times, once
    # per configuration value.
    configurations: null

    # Expander for experiment configurations.
    #
    # Options are:
    # - job.configuration.SequentialExpander
    # - job.configuration.ProductExpander
    #
    # The zip expander will generate n configurations for m vectors
    # containing n values each (vectors must have the same length).
    # The product expander will generate the Cartesian product with all
    # n^m (or n1*n2*...*nn for vectors of different lengths) possible
    # combinations
    #
    # WARNING: building the Cartesian product is linear to the number of
    # dimensions of a single vector, but exponential to the overall number
    # of vectors. Make sure you have enough memory.
    configuration_expander:
      name: job.configuration.ZipExpander

    # Number of repeated runs to perform per configuration
    repetitions: 1

    # Aggregator formats to aggregate results of multiple runs
    # of various configurations.
    # Parameters are the same as for outputs.
    aggregators:
      - name: output.formats.CurveAverageAggregator
        events:
          - name: onUnmaskingFinished
